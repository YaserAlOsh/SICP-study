#lang sicp
;Alternative implementation of queues
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "")
          (car front-ptr)))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair))
              (else ;#f))))
               (set-cdr! rear-ptr new-pair)
               (set-rear-ptr! new-pair)))))
    (define (delete-queue!)
      (set! front-ptr (cdr front-ptr)))
    (define (print-queue)
      (display front-ptr))
    (define (dispatch m)
      (cond ((eq? m 'insert!) insert-queue!)
            ((eq? m 'delete!) (delete-queue!))
            ((eq? m 'front) (front-queue))
            ((eq? m 'print) (print-queue))
            ((eq? m 'empty?) (empty-queue?))
            (else
             (error "No dispatch for message" m))))
            
    dispatch))

(define (insert-queue! q item)
  ((q 'insert!) item))
(define (delete-queue! q)
  (q 'delete!))
(define (empty-queue? q)
  (q 'empty?))
(define (front-queue q)
  (q 'front))

